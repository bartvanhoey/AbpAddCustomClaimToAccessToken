@page "/books"
@* @attribute [Authorize(BookStorePermissions.Books.Default)] *@
@using BookStore.Permissions
@using Microsoft.AspNetCore.Authorization
@using Volo.Abp.Application.Dtos
@using Volo.Abp.BlazoriseUI
@using Volo.Abp.AspNetCore.Components.Web
@using BookStore.Application.Contracts.Books
@using BookStore.Domain.Shared.Books
@using BookStore.Localization
@using Microsoft.Extensions.Localization
@inject IStringLocalizer<BookStoreResource> L
@inject AbpBlazorMessageLocalizerHelper<BookStoreResource> LH
@inherits AbpCrudPageBase<IBookAppService, BookDto, Guid, PagedAndSortedResultRequestDto, CreateBookDto, UpdateBookDto>

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>@L["Books"]</h2>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                @if (HasCreatePermission)
                {
                    <Button Color="Color.Primary" Clicked="OpenCreateModalAsync">@L["NewBook"]</Button>
                }
            </Column>
        </Row>
    </CardHeader>

    <CardBody>
        <DataGrid TItem="BookDto" Data="Entities" ReadData="OnDataGridReadAsync" TotalItems="TotalCount"
            ShowPager="true" PageSize="PageSize">
            <DataGridColumns>
                <DataGridEntityActionsColumn TItem="BookDto" @ref="@EntityActionsColumn">
                    <DisplayTemplate>
                        <EntityActions TItem="BookDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="BookDto" Text="@L["Edit"]" Visible="HasUpdatePermission"
                                Clicked="() => OpenEditModalAsync(context)" />
                            <EntityAction TItem="BookDto" Text="@L["Delete"]" Visible="HasDeletePermission"
                                Clicked="() => DeleteEntityAsync(context)"
                                ConfirmationMessage="() => GetDeleteConfirmationMessage(context)" />
                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>
                <DataGridColumn TItem="BookDto" Field="@nameof(BookDto.Name)" Caption="@L["BookName"]"></DataGridColumn>
                <DataGridColumn TItem="BookDto" Field="@nameof(BookDto.Type)" Caption="@L["BookType"]">
                    <DisplayTemplate>
                        @L[$"Enum:BookType:{(int)context.Type}"]
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="BookDto" Field="@nameof(BookDto.PublishDate)" Caption="@L["BookPublishDate"]">
                    <DisplayTemplate>
                        @context.PublishDate.ToShortDateString()
                    </DisplayTemplate>
                </DataGridColumn>

                <DataGridColumn TItem="BookDto" Field="@nameof(BookDto.Price)" Caption="@L["BookPrice"]">
                </DataGridColumn>
                <DataGridColumn TItem="BookDto" Field="@nameof(BookDto.CreationTime)" Caption="@L["BookCreationTime"]">
                    <DisplayTemplate>
                        @context.CreationTime.ToLongDateString()
                    </DisplayTemplate>
                </DataGridColumn>


            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

<Modal @ref="@CreateModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true" Size="ModalSize.Default">
        <Form>
            <ModalHeader>
                <ModalTitle>@L["NewBook"]</ModalTitle>
                <CloseButton Clicked="CloseCreateModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Validations @ref="@CreateValidationsRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Row>
                        <Column ColumnSize="ColumnSize.Is12">
                            <Validation MessageLocalizer="@LH.Localize">
                                <Field>
                                    <FieldLabel>@L["BookName"]</FieldLabel>
                                    <TextEdit @bind-Text="@NewEntity.Name">
                                        <Feedback>
                                            <ValidationError />
                                        </Feedback>
                                    </TextEdit>
                                </Field>

                                <Field>
                                    <FieldLabel>@L["BookType"]</FieldLabel>
                                    <Select TValue="BookType" @bind-SelectedValue="@NewEntity.Type">
                                        @foreach (int value in Enum.GetValues(typeof(BookType)))
                                        {
                                            <SelectItem TValue="BookType" Value="@((BookType)value)">
                                                @L[$"Enum:BookType:{value}"]
                                            </SelectItem>
                                        }
                                    </Select>
                                </Field>

                                <Field>
                                    <FieldLabel>@L["BookPublishDate"]</FieldLabel>
                                    <DateEdit TValue="DateTime" @bind-Date="@NewEntity.PublishDate" />
                                </Field>

                                <Field>
                                    <FieldLabel>@L["BookPrice"]</FieldLabel>
                                    <NumericEdit TValue="float" @bind-Value="@NewEntity.Price" />
                                </Field>

                            </Validation>
                        </Column>
                    </Row>
                </Validations>
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary" Clicked="CloseCreateModalAsync">@L["Cancel"]</Button>
                <Button Color="Color.Primary" Type="@ButtonType.Submit" PreventDefaultOnSubmit="true"
                    Clicked="CreateEntityAsync">@L["Save"]</Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

<Modal @ref="@EditModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true" Size="ModalSize.Default">
        <ModalHeader>
            <ModalTitle>@EditingEntity.Name</ModalTitle>
            <CloseButton Clicked="CloseEditModalAsync" />
        </ModalHeader>
        <ModalBody>
            <Validations @ref="@EditValidationsRef" Model="@EditingEntity" ValidateOnLoad="false">
                <Row>
                    <Column ColumnSize="ColumnSize.Is12">
                        <Validation MessageLocalizer="@LH.Localize">
                            <Field>
                                <FieldLabel>@L["BookName"]</FieldLabel>
                                <TextEdit @bind-Text="EditingEntity.Name">
                                    <Feedback>
                                        <ValidationError />
                                    </Feedback>
                                </TextEdit>
                            </Field>
                        </Validation>
                        <Field>
                            <FieldLabel>@L["BookType"]</FieldLabel>
                            <Select TValue="BookType" @bind-SelectedValue="@EditingEntity.Type">
                                @foreach (int value in Enum.GetValues(typeof(BookType)))
                                {
                                    <SelectItem TValue="BookType" Value="@((BookType)value)">
                                        @L[$"Enum:BookType:{value}"]
                                    </SelectItem>
                                }
                            </Select>
                        </Field>
                        <Field>
                            <FieldLabel>@L["BookPublishDate"]</FieldLabel>
                            <DateEdit TValue="DateTime" @bind-Date="@EditingEntity.PublishDate" />
                        </Field>
                        <Field>
                            <FieldLabel>@L["BookPrice"]</FieldLabel>
                            <NumericEdit TValue="float" @bind-Value="@EditingEntity.Price" />
                        </Field>
                    </Column>
                </Row>
            </Validations>
        </ModalBody>
        <ModalFooter>
            <Button Color="Color.Secondary" Clicked="CloseEditModalAsync">@L["Cancel"]</Button>
            <Button Color="Color.Primary" Type="@ButtonType.Submit" PreventDefaultOnSubmit="true"
                Clicked="UpdateEntityAsync">@L["Save"]</Button>
        </ModalFooter>
    </ModalContent>
</Modal>

@code
{
    public Books()
    {
        @* CreatePolicyName = BookStorePermissions.Books.Create; *@
        @* UpdatePolicyName = BookStorePermissions.Books.Update; *@
        @* DeletePolicyName = BookStorePermissions.Books.Delete; *@
    }
}